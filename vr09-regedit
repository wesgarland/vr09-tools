#! /usr/bin/gsr -C

/**
 *  Copyright (c) 2014 Wes Garland <wes@page.ca>
 *
 *  This file is part of vr09-tools.
 *  vr09-tools is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  vr09-tools is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with vr09-tools.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  @file           vr09-regedit    Program to visualize and modify
 *                                  Roland VR-09 Registration Sets. 
 *
 *  @author         Wes Garland, wes@page.ca
 *  @date           Aug 2014
 */ 

const COMMON = require("vr09/common");
const UPG = require("vr09/upg");
const Registration = UPG.Registration;
const RegistrationSet = UPG.RegistrationSet;

/** 
 *  Parse a string representing a bank and button number, i.e. "3-4"
 *  for the fourth registration in bank 3, into a set index.
 *
 *  Can also "parse" a number between 0 and 99 for users who prefer
 *  to work directly with the set index.
 */
function parsePatch(str)
{
  var bank, button, number;
  var a = str.split("-");
  if (a.length != 2)
  {
    if (typeof str != "number")
      number = parseInt(str, 10);
    if (number >= 0 && number < 100)
      return number;
    throw new Error("'" + str + "' is not a valid patch location. Use Bank-Number");
  }

  bank = parseInt(a[0], 10);
  button = parseInt(a[1], 10);
  if (bank < 0 || button < 0 || bank > 25 || button > 4)
    throw new Error("'" + str + "' is not a valid patch location. Use Bank-Number, where Bank <= 25 and Number <= 4");
  return ((bank-1) * 4) + button - 1;
}

/**
 *  Process commands which operate in registrations instead of registration sets. 
 */
function doPatchCmds(set, registrationNumber, argv)
{
  var cmd, reg;
  var argvBackup = argv.slice();

  while (argv.length)
  {
    cmd = argv.shift();
    reg = set[registrationNumber];	
    switch (cmd)
    {
      case "end":
	return;
      case "next":
	registrationNumber = ((registrationNumber + 1) % 100);
	break;
      case "prev":
	registrationNumber = registrationNumber ? registrationNumber - 1 : 99;
        break;
      case "patch":
        registrationNumber = parsePatch(argv.shift());
	break;
      case "store":
	set[parsePatch(argv.shift())] = reg.duplicate();
	break;
      case "copy": 
        reg = set[registrationNumber] = set[parsePatch(argv.shift())].duplicate();
        break;
      case "write": case "save":
	reg.save(argv.shift(), set, registrationNumber);
	break;
      case "read": case "load":
	reg.load(argv.shift());
	break;
      case "until":
	if (parsePatch(argv.shift()) == registrationNumber)
	  return;
	argv = argvBackup.slice();
        break;
      case "print":
        print(COMMON.formatString(argv.shift(), set, registrationNumber));
	break;
      default:
	if (reg[cmd] && !reg.hasOwnProperty(cmd) && typeof reg[cmd] === "function")
	  reg[cmd](argv.shift());
	else
	{
	  print("invalid command: " + cmd);
	  throw 1;
	}
    }
  }
}

function showAllRegistrations(set)
{
  var i, bank, button;

  for (i=0; i < 100; i++)
  {
    bank = Math.floor(i / 4) + 1;
    button = (i % 4) + 1;
    if (button === 1)
      print("\nBank: " + bank);
    print(button + " - " + set[i].name);
  }
}

function showHeader(set)
{
  print("File Format: " + set.format);
  print("Set Name:    " + set.name);
}

var argvZero;
function usage()
{
  print("");
  print("vr09-regedit - Editor for VR09 Registrations and Registration Sets");
  print("usage: " + argvZero + " <filename.UPG> <command [args]>");
  print("");
  print("The set commmands are: ");
  print(" - show <header | 1-100 | all>    Show contents of the registration set");
  print(" - save <filename>                Save the registration set");
  print(" - patch <B-N>                    Work with patch N in bank B");
  print(" - rename <new name>              Rename the set (use quotes!)");
  print("");
  print("The patch commmands are: ");
  print(" - end                            Go back to working with registration set");
  print(" - next                           Work with the next patch");
  print(" - prev                           Work with the previous patch");
  print(" - patch <B-N>                    Work with patch N in bank B");
  print(" - rename <new name>              Rename the patch (use quotes!)");
  print(" - store <B-N>                    Store the patch into location B-N");
  print(" - copy <B-N>                     Overwrite the patch with the one at B-N");
  print(" - load <filenameFormat>          Read a patch file into the current location");
  print(" - save <filenameFormat>          Write the current patch into a patch file");
  print(" - until <B-N>                    Do next, repeat the patch operations in the");
  print("                                  sequence until the patch number matches B-N");
  print("");
  print("filenameFormat escape sequences: ");
  print(" - %%                             Percent symbol");
  print(" - %i                             Patch index (0-99)");
  print(" - %n                             Patch name");
  print(" - %N                             Patch number (B-N)");
  print(" - %s                             Set name"); 
  throw 0;
}

/** Main entry point for the program */
function main(argv, argc)
{
  var set;
  var cmd, arg;

  argvZero = argv[0];

  if (argc == 2)
  {
    if (argv[1] != "--version")
      usage();
  }
  else
  {
    if (argc < 3)
      usage();
    set = new RegistrationSet(argv[1]);
    argv.shift();
  }

  argv.shift();

  while(argv.length)
  {
    cmd = argv.shift();

    switch(cmd)
    {
      case "version": case "--version":
	print("vr09-tools 0.01a");
	throw 0;
      case "help": case "-h": case "--help":
	usage();
	break;
      case "show":
	arg = argv.shift();
	switch (arg)
        {
  	  case "header":
	    showHeader(set);
	    break;
	  case "all":
	    showHeader(set);
	    showAllRegistrations(set);
	    break;
  	  default:
	    print(set[parsePatch(arg)].name);
	    break;
	}
        break;
      case "patch":
        doPatchCmds(set, parsePatch(argv.shift()), argv);
	break;
      default:
	if (set[cmd] && !set.hasOwnProperty(cmd) && typeof set[cmd] === "function")
	  set[cmd](argv.shift());
	else
	{
	  print("invalid command: " + cmd);
	  throw 1;
	}
    }
  }
}

/* Work-around for GPSEE 0.21 shutdown bug */
try
{
  main(arguments, arguments.length);
  require("gpsee")._exit(3);
}
catch (e)
{
  if (typeof e === "number")
    require("gpsee")._exit(e);
  else
    throw e;
}
